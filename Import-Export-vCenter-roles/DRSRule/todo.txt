add SDRS rule support
add ability to specify prefix for names of new objects during Import
add -RelatedObject param for Get-DrsVMGroup (by related VM), Get-DrsVMHostGroup (by related VMHost)
add support for [string[]] values to -Name param for Get-DrsVMGroup, Get-DrsVMHostGroup
add -Type param for Import-DrsRule, so one can import just rules/groups of given type
add verbosity to WhatIf info for
	-New/Set-DrsVMHostGroup output -- include VMHosts' names
	-New/Set-DrsVMGroup output -- include VMs' names
add ability to rename groups/rules via Set- functions
?remove spots that re-assign values to param vars (use new var name instead of re-using param name, like $VM = $VM | %{...do something...}); slight weirdness when acting on those further:  ValidateScript() seems to run again, and if the var is not of the given type, throws "The variable cannot be validated because the value System.Management.Automation.PSObject[] is not a valid value for the VMHost variable.", for example, but later on in the function, not at the start
add support to enable functionality:
	## as is, this tries to make group VmGrp1 three times, as the .ReconfigureComputeResource() is in the Process{} block of the New-DrsVMGroup cmdlet; need to move that call to the End{} block to enable this, take ValueFromPipeline for $VM, and get $Cluster value from $VM.VMHost.Parent?
	Get-Cluster $strCluster | Get-VM VM0,VM1,VM2 | New-DrsVMGroup -Name VmGrp1  ## likewise, add for New-DrsVMHostGroup, and similarly for Set-DrsVMGroup, Set-DrsVMHostGroup
update Get-Drs* behavior to match standard Get-* cmdlets' behavior of returning error when no item found of given name when $Name has no wildcard
	"Get-DrsVMGroup bogusGroupName" should throw error
	"Get-DrsVMGroup bogusGroupName*" should return $null
add function to get objects from exported JSON, to essentially return info items that could be used for New-Drs*, but that would be useful to see what items are stored in given JSON
